<template>
	<view class="register">
		<!-- <div class="notice">* 请谨慎填写真实信息，请勿虚假填写，核实后虚假信息<br>将不予通过审核，出现问题将承担相关责任。</div> -->
		<!-- <div class="upload-img">
			<u-upload :fileList="fileList5" @afterRead="afterRead" @delete="deletePic" name="5" multiple :maxCount="1"
				width="600rpx" height="392rpx">
				<image src="@/static/sfz_a2.png" mode="widthFix" class="img">
				</image>
			</u-upload>
		</div> -->
		<view style="padding: 20rpx;">

			<view class="padding">
				<u-button type="primary" @click="onUpload" :plain="true" text="身份证识别"></u-button>
			</view>
		</view>
		<div class="edit-info">

			<u--form labelPosition="left" ref="form1" :labelWidth="90">
				<u-form-item label="姓名" prop="userInfo.name" borderBottom ref="item1">
					<u--input v-model="userInfo.name" border="none" placeholder="请输入姓名"></u--input>
				</u-form-item>

				<u-form-item label="证件类型" prop="userInfo.sex" borderBottom @click="showId = true;" ref="item1">
					<u--input v-model="userInfo.documentType" disabled disabledColor="#ffffff" placeholder="请选择证件类型"
						border="none"></u--input>
					<u-icon slot="right" name="arrow-right"></u-icon>
				</u-form-item>
				<u-form-item label="证件号码" prop="userInfo.idNumber" borderBottom ref="item1">
					<u--input v-model="userInfo.idNumber" placeholder="请输入证件号码" border="none"></u--input>
				</u-form-item>
				<u-form-item label="性别" prop="userInfo.sex" borderBottom @click="showSex = true;" ref="item1">
					<u--input v-model="userInfo.sex" disabled disabledColor="#ffffff" placeholder="请选择性别" border="none">
					</u--input>
					<u-icon slot="right" name="arrow-right"></u-icon>
				</u-form-item>

				<u-form-item label="生日" prop="userInfo.birthday" borderBottom @click="showPicker = true;hideKeyboard()"
					ref="item1">
					<u--input v-model="userInfo.birthday" disabled disabledColor="#ffffff" placeholder="请选择生日"
						border="none"></u--input>
					<u-icon slot="right" name="arrow-right"></u-icon>
				</u-form-item>
				<u-form-item label="户籍地址" prop="address" borderBottom ref="item1">
					<u--textarea placeholder="请输入身份证正面中的住址信息" border="none" autoHeight v-model="userInfo.address" count>
					</u--textarea>
				</u-form-item>
				<u-form-item label="手机号" prop="userInfo.phone" borderBottom ref="item1">
					<u--input v-model="userInfo.phone" border="none" placeholder="请输入手机号"></u--input>
					<!-- <u-button slot="right" open-type="getPhoneNumber" @getphonenumber="getPhoneNumber" text="一键获取" type="success" size="mini" :disabled="disabled1">
					</u-button> -->
				</u-form-item>
				<u-form-item label="验证码" prop="code" borderBottom>
					<u--input v-model="userInfo.code" border="none" type='number' :maxlength='6' placeholder="请填写验证码">
					</u--input>
					<u-button slot="right" @tap="getCode" :text="tips" type="success" size="mini" :disabled="disabled1">
					</u-button>
				</u-form-item>
			</u--form>
		</div>

		<PromiseComponent v-model="isPromise" />
		<div class="register-btn" @click="register">注册{{value1}}</div>
		<u-action-sheet :actions="documentTypeList" title="选择证件类型" @close="showId = false" :show="showId"
			@select="selectId"></u-action-sheet>
		<u-action-sheet :actions="sexList" title="选择性别" @close="showSex = false" :show="showSex" @select="selectSex">
		</u-action-sheet>
		<u-datetime-picker :show="showPicker" :value="birthDate" mode="date" :minDate="minDateTime"
			:maxDate="maxDateTime" @confirm="birthDateConfirm" closeOnClickOverlay @cancel="birthDateClose"
			@close="birthDateClose"></u-datetime-picker>
		<u-code ref="uCode" @change="codeChange" seconds="90" @start="disabled1 = true" @end="disabled1 = false">
		</u-code>
		<u-loading-page :loadingText="loadingPageData.loadingText" :image="loadingPageData.image"
			:loadingMode="loadingPageData.loadingMode" :bgColor="loadingPageData.bgColor" :loading="loading"
			:color="loadingPageData.color" :loadingColor="loadingPageData.loadingColor">
		</u-loading-page>
	</view>
</template>

<script>
	import PromiseComponent from '@/components/promise.vue'
	import {
		getOpenId,
		getCompanyByHsCodeV2,
		getCardDetail,
		getUploadToken,
		getDictType,
		register,
		sendSms,
		verifySms
	} from '../../common/api.js'
	import config from '@/common/config'
	import {
		dateFormat
	} from '../../util/index.js'
	import {
		checkPhone,
		checkLicensePlate,
		checkIdNo
	} from '@/util/regext'
	export default {
		components: {
			PromiseComponent
		},
		data() {
			return {
				loading:false,
				loadingPageData: {
					// 自定义提示内容
					loadingText: '加载中',
					// 自定义图片
					image: '',
					// 自定义加载动画模式
					loadingMode: 'spinner',
					// 自定义背景色
					bgColor: 'rgba(0, 0, 0, 0.4)',
					color:'#eee'
				},
				fileList5: [],
				isPromise: false,
				showId: false,
				showSex: false,
				showPicker: false,
				value1: '',
				disabled1: false,
				tips: '获取验证码',
				userInfo: {
					documentType: '',
					idNumber: '',
					name: '',
					phone: '',
					sex: '',
					address: '',
					birthday: '',
					code: '',
				},
				birthDate: Number(new Date()),
				maxDateTime: new Date().getTime(),
				minDateTime: new Date("1920-01-01").getTime(),
				pickerTime: '',
				documentType: '',
				sex: '',
				openId: '',
				sexList: [],
				documentTypeList: [],
			};
		},
		onShow() {

		},
		async onLoad() {
			this.loading = true
			await this.getDictType()
			await this.getSexList()
			await this.getQiniuToken()
			this.loading = false
			wx.login({
				success: (res) => {
					if (res.code) {
						//发起网络请求
						console.log('获取用户成功！' + res.code)
						this.getOpenId(res.code)
					} else {
						console.log('获取用户登录态失败！' + res.errMsg)
					}
				}
			});
			this.selectId({
				dictLabel: '身份证',
				dictValue: '1'
			})
		},
		watch: {
			// pickerTime(val) {
			// 	this.userInfo.birthday = dateFormat(new Date(val), 'yyyy-MM-dd')
			// }
		},
		methods: {
			

			/* 上传 */
			onUpload() {
				var that = this
				var resultRes = ''
				wx.chooseImage({ // 使用微信的方法进入聊天界面选择你之前接受过的文件
					sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
					sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
					count: 1, // 最多可以选择的文件个数，可以 0～100
					//type: 'file', // 所选的文件的类型，其它属性可以看官方文档
					success(res) {
						console.log('选择文件' + res)
						that.uploadImg(res)
					},
					fail(error) {
						console.log("选择文件失败", error)
					}
				})

			},

			async uploadImg(resultRes) {
				var result = await this.uploadFilePromise(resultRes.tempFiles[0].path, resultRes.tempFiles[0]
					.name)
				this.getCardDetail(result)
			},

			getPhoneNumber(e) {
				console.log(e)
				console.log(e.detail.errMsg);
				if ("getPhoneNumber:ok" === e.detail.errMsg) {
					console.log('iv', e.detail.iv);
					console.log('encryptedData', e.detail.encryptedData);
					// this.iv = e.detail.iv
					// this.encryptedData = e.detail.encryptedData

					// let self = this;
					// //后台解密获取用户的手机号码
					// let params = {
					// 	jsCode: self.jsCode,
					// 	encryptedData: e.detail.encryptedData,
					// 	iv: e.detail.iv,
					// }
				}

			},

			codeChange(text) {
				this.tips = text;
			},
			getCode() {
				var phone = this.userInfo.phone
				var message = ''
				if (!checkPhone(phone))
					message = '手机号码格式不正确'
				if (!phone) message = '请输入手机号码'

				if (message) {
					uni.$u.toast(message);
					return false
				}

				if (this.$refs.uCode.canGetCode) {
					// 模拟向后端请求验证码
					uni.showLoading({
						title: '正在获取验证码'
					})
					var param = {
						phone: phone,
						scene: '注册'
					}
					sendSms({
						params: param,
						custom: {
							toast: true,
							catch: true
						}
					}).then(res => {
						uni.hideLoading();
						// 这里此提示会被this.start()方法中的提示覆盖
						uni.$u.toast('验证码已发送');
						// 通知验证码组件内部开始倒计时
						this.$refs.uCode.start();
					}).catch(err => {
						// uni.hideLoading();
					})


					// setTimeout(() => {
					// 	uni.hideLoading();
					// 	// 这里此提示会被this.start()方法中的提示覆盖
					// 	uni.$u.toast('验证码已发送');
					// 	// 通知验证码组件内部开始倒计时
					// 	this.$refs.uCode.start();
					// }, 2000);
				} else {
					uni.$u.toast('倒计时结束后再发送');
				}
			},
			//获取用户信息
			async getOpenId(code) {
				var that = this
				await getOpenId(code).then(res => {
					if (res && JSON.stringify(res) !== "{}") {
						that.openId = res
						uni.setStorageSync('openId', res);
					}
				})
			},
			// 新增图片
			async afterRead(event) {
				// 当设置 mutiple 为 true 时, file 为数组格式，否则为对象格式
				let lists = [].concat(event.file)
				console.log(lists)
				let fileListLen = this[`fileList${event.name}`].length
				lists.map((item) => {
					this[`fileList${event.name}`].push({
						...item,
						status: 'uploading',
						message: '上传中'
					})
				})
				for (let i = 0; i < lists.length; i++) {
					const result = await this.uploadFilePromise(lists[i].url, event.name)
					let item = this[`fileList${event.name}`][fileListLen]
					this[`fileList${event.name}`].splice(fileListLen, 1, Object.assign(item, {
						status: 'success',
						message: '',
						url: result
					}))
					fileListLen++
					this.getCardDetail(result)
				}
			},
			validityPeopleForm() {
				const {
					name,
					documentType,
					idNumber,
					sex,
					phone,
					birthday,
					address,
					code
				} = this.userInfo
				let message = ''
				if (!code) message = '请输入验证码'
				if (!checkPhone(phone)) message = '手机号码格式不正确'
				if (!phone) message = '请输入手机号码'
				if (!address) {
					message = '请输入户籍地址'
				}
				if (!sex) message = '请选择性别'
				if (!birthday) message = '请选择生日'

				if (!address) {
					message = '请输入户籍地址'
				}

				if (!idNumber) {
					message = '请输入证件号码'
				} else if (documentType === '身份证' && !checkIdNo(idNumber)) {
					message = '证件号码格式不正确'
				} else if (documentType !== '' && !uni.$u.test.enOrNum(idNumber)) {
					message = '证件号码格式不正确'
				}
				if (documentType === '' || this.documentType === null || this.documentType === 0) message = '请选择证件类型'


				if (!name) {
					message = '请输入名字'
				}
				if (message) {
					uni.$u.toast(message);
					return false
				}
				return true
			},
			async getCardDetail(url) {
				var that = this
				var data = {
					url
					// url: 'https://img.alicdn.com/imgextra/i3/O1CN01BJBQ6i1tl1fq1yOrD_!!6000000005941-2-tps-805-655.png'
					// url: ''
				}
				uni.showLoading({
					title: '身份证识别中...',
					mask: true
				});
				await getCardDetail(data, {
					custom: {
						toast: true,
						catch: true
					}
				}).then(res => {
					if (res) {
						this.userInfo = {
							documentType: '身份证',
							idNumber: res.idNumber,
							name: res.name,
							address: res.address,
							phone: '',
							sex: res.sex,
							birthday: res.birthDate.replace('年', '-').replace('月', '-').replace('日', '')
						}
						this.userInfo.birthday = uni.$u.timeFormat(that.userInfo.birthday, 'yyyy-mm-dd')
						that.birthDate = Number(new Date(that.userInfo.birthday))
						// this.pickerTime = new Date(this.userInfo.birthday)
						this.documentType = 1
						this.sex = res.sex === '男' ? '0' : '1'
					}
					uni.hideLoading();
				}).catch(err => {
					that.lockType = true
					that.show3 = true
				})

			},
			register() {
				uni.showLoading({
					title: '加载中...',
					mask: true
				});
				if (!this.validityPeopleForm()) {
					setTimeout(function() {}, 2000);
					return false
				}
				if (!this.isPromise) {
					uni.$u.toast('请同意个人承诺书');
					uni.hideLoading();
					return
				}
				var param = {
					phone: this.userInfo.phone,
					scene: '注册',
					code: this.userInfo.code
				}

				verifySms({
					params: param,
					custom: {
						toast: true,
						catch: true
					}
				}).then(res => {
					uni.showLoading({
						title: '加载中...',
						mask: true
					});
					const params = {
						openId: this.openId,
						documentType: this.documentType ? this.documentType : 1,
						idNumber: this.userInfo.idNumber,
						name: this.userInfo.name,
						phone: this.userInfo.phone,
						registerAddr: this.userInfo.address,
						sex: this.sex,
						birthday: this.userInfo.birthday
					}
					register(params, {
						custom: {
							toast: true,
							catch: true
						}
					}).then(res => {
						uni.hideLoading();
						uni.showToast({
							title: '注册成功',
							icon: 'success',
							mask: true
						})
						uni.setStorageSync('token', res.token)
						this.$store.dispatch('setLoginStatus', true);
						setTimeout(() => {
							uni.reLaunch({
								url: '/pages/main/index',
							})
						}, 1500)
					}).catch(err => {
						if (err.code === 201) {
							uni.redirectTo({
								url: '/pages/login/index',
							})
						}
					})
				}).catch(err => {
					console.log(err)
					// uni.$u.toast(err.msg);
				})



			},
			// 删除图片
			deletePic(event) {
				var that = this
				this[`fileList${event.name}`].splice(event.index, 1)
				if (event.name == 5) {
					that.frontImg = ''
				} else if (event.name == 6) {
					that.reverseImg = ''
				}
			},
			getQiniuToken() { //获取七牛的uptoken
				var that = this
				getUploadToken().then(res => {
					if (res && JSON.stringify(res) !== "{}") {
						this.qiniuToken = res
					}

				})

			},
			uploadFilePromise(url, name) {
				var that = this
				return new Promise((resolve, reject) => {
					let a = uni.uploadFile({
						url: 'https://upload-z1.qiniup.com/',
						filePath: url,
						name: 'file',
						formData: {
							token: that.qiniuToken,
						},
						success: (res) => {
							setTimeout(() => {

								if (res.data) {
									// var data = JSON.parse(res.data);
									console.log(res)
									var imgData = JSON.parse(res.data);
									console.log(imgData)
									if (name == 5) {
										that.frontImg = config.qiniuUrl + imgData.key
										console.log(config.qiniuUrl + imgData.key)
										that.fileList5.forEach(item => {
											item.url = config.qiniuUrl + imgData.key
										})
										// that.fileList5.push({url:config.baseUrl + imgData.fileName})
										console.log(that.fileList5)
									} else if (name == 6) {
										that.reverseImg = config.qiniuUrl + imgData.key
										that.fileList6.forEach(item => {
											item.url = config.qiniuUrl + imgData.key
										})
										// that.fileList6.push({url:config.baseUrl + imgData.fileName})
									}
									resolve(config.qiniuUrl + imgData.key)
								}

							}, 1000)
						}
					});
				})
			},
			async getDictType() {
				await getDictType("document_type").then(res => {
					if (res && JSON.stringify(res) !== "{}") {
						this.documentTypeList = res.map((item) => {
							item.name = item.dictLabel
							return item
						})
					}
				})
			},
			async getSexList() {
				await getDictType("sys_user_sex").then(res => {
					if (res && JSON.stringify(res) !== "{}") {
						this.sexList = res.map((item) => {
							item.name = item.dictLabel
							return item
						})
					}
				})
			},
			selectSex(info) {
				const {
					dictValue,
					dictLabel
				} = info
				this.sex = dictValue
				this.userInfo.sex = dictLabel
				this.showId = false
			},
			birthDateClose() {
				this.showPicker = false
				this.$refs.form1.validateField('userInfo.birthDate')
			},
			birthDateConfirm(e) {
				this.showPicker = false
				this.userInfo.birthday = uni.$u.timeFormat(e.value, 'yyyy-mm-dd')
				this.$refs.form1.validateField('userInfo.birthDate')
			},
			hideKeyboard() {
				uni.hideKeyboard()
			},
			selectId(info) {
				const {
					dictValue,
					dictLabel
				} = info
				this.documentType = dictValue
				this.userInfo.documentType = dictLabel
				this.showSex = false
			}
		},
	}
</script>

<style lang="scss" scoped>
	.register {
		width: 100%;
		min-height: 100vh;
		background: #F1F4F7;
	}

	.notice {
		font-size: 28upx;
		font-family: PingFangSC-Regular, PingFang SC;
		font-weight: 400;
		color: #DA0303;
		line-height: 40upx;
		margin: 0.28rem auto;
	}

	.upload-img {
		width: 600upx;
		height: 372upx;
		margin: 30upx auto 40upx;

		.img {
			width: 600upx;
			height: 372upx;
		}
	}

	.register-btn {
		margin: 40upx auto 70upx;
		width: 600upx;
		height: 88upx;
		background: #3A8CF0;
		border-radius: 8upx;
		font-size: 32upx;
		font-family: PingFangSC-Regular, PingFang SC;
		font-weight: 400;
		color: #FFFFFF;
		line-height: 88upx;
		text-align: center;
	}

	.edit-info {
		width: 100%;
		// height: 528upx;
		background: #FFFFFF;
		margin-bottom: 40upx;
		padding: 0 40upx;
	}
</style>
