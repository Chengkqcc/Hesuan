<template>
	<view >
		<view class="header">
			<view class="header_main">
				<image src="/static/logo1.png"></image>
				<text>东兴市智慧化管理平台</text>
			</view>
		</view>
		<view class="login">

<!-- 			<div class="info">
				<p class="name">姓名</p>
				<div class="form-action">
					<u--input class="form-action" v-model="userInfo.name" placeholder="请输入姓名" fontSize='31rpx'
						border="none"></u--input>
				</div>
			</div> -->
			<div class="spe_info">
				<p class="name">证件类型</p>
				<div class="form-action" @click="showSheet">
					<u--input class="form-action" v-model="userInfo.type" disabled disabledColor="#ffffff"
						placeholder="请选择证件类型" fontSize='31rpx' border="none"></u--input>
				</div>
				<div class="right">
					<u-icon slot="right" name="arrow-right"></u-icon>
				</div>
			</div>
			<div class="spe_info">
				<p class="name">证件号码</p>
				<div class="form-action">
					<u--input v-model="userInfo.code" placeholder="请输入证件号码" fontSize='31rpx' border="none" v-on:input = "changeColor"></u--input>
				</div>
			</div>
			<div class="spe_info">
				<p class="name">手机号码</p>
				<div class="form-action">
					<u--input v-model="userInfo.name" placeholder="请输入手机号码" fontSize='31rpx' border="none" v-on:input = "changeColor"></u--input>
				</div>
			</div>
			<div class="spe_info">
				<p class="name">验证码</p>
				<div class="form-action form_actionspe">
					<view class="spe_ipt">
						<u--input v-model="userInfo.authCode" placeholder="请输入验证码" fontSize='31rpx' border="none" v-on:input = "changeColor" ></u--input>
					</view>
					
					<!-- <u-button text="发送验证码" color="#0e59a3" class="sendCode"></u-button> -->
					<button class="sendCode" :class="login_flag? '' : 'disable'">发送验证码</button>
				</div>
			</div> 
			
			<div class="login-action" @click="checkLogin" :class="login_flag? '' : 'disable'">登录平台</div>
			<div class="register" @click="register" >注册</div>
			<u-action-sheet :actions="list" @close="show = false" :title="title" :show="show" @select="select">
			</u-action-sheet>
			<u-popup :show="showPopup" :round="20" mode="center" closeable @close="close" @open="open">
				<view class="notice">
					<div class="title">提示</div>
					<div class="notice-info">系统未检测到您的信息，请立即注册。</div>
					<u-divider></u-divider>
					<div class="register-btn">立即注册</div>
				</view>
			</u-popup>
			
			<u-modal :show="showPopupYZM" :closeOnClickOverlay="true" showCancelButton title="账户登录" @confirm="login"
				@cancel="showPopupYZM = false">
				<view class="slot-content">
					<u--form labelPosition="left" ref="form1" labelWidth="140rpx">
						<u-form-item label="手机号" prop="userInfo.phone" borderBottom ref="item1">
							<u--input v-model="msm.phone" border="none" placeholder="请输入手机号" :disabled="true">
							</u--input>
							<!-- <u-button slot="right" open-type="getPhoneNumber" @getphonenumber="getPhoneNumber" text="一键获取" type="success" size="mini" :disabled="disabled1">
							</u-button> -->
						</u-form-item>
						<u-form-item label="验证码" prop="code" borderBottom>
							<u--input v-model="msm.code" border="none" type='number' :maxlength='6'
								placeholder="请填写验证码" :style="{background:gray}">
							</u--input>
							<u-button slot="right" @tap="getCode" :text="tips" type="success" size="mini"
								:disabled="disabled1">
							</u-button>
						</u-form-item>
					</u--form>
				</view>
			</u-modal>
			
			<u-code ref="uCode" @change="codeChange" seconds="90" @start="disabled1 = true" @end="disabled1 = false">
			</u-code>
		
			<u-toast ref="uToast"></u-toast>
		</view>
	</view>

</template>

<script>
	import {
		getDictType,
		getUserInfo,
		login,
		sendSms,verifySms,
		getOpenId,
		loginCheck
	} from '../../common/api.js'
	import {
		checkPhone,
		checkLicensePlate,
		checkIdNo
	} from '@/util/regext'
	export default {
		data() {
			return {
				show: false,
				title: '证件类型',
				disabled1: false,
				tips: '获取验证码',
				list: [],
				msm: {
					phone: "",
					code: ''
				},
				userInfo: {
					name: '',	//姓名
					type: '',	//证件类型
					code: '',	//证件号码
					phoneNumber:'', //手机号码
					authCode:''	//验证码
				},
				openId: '',
				dictValue: '',
				showPopup: false,
				showPopupYZM: false,
				login_flag:false
			};
		},
		async onLoad() {
			await this.getDictType()
			await this.getLoginType()
			this.select({
				dictLabel: '身份证',
				dictValue: '1'
			})
			
		},
		methods: {
			//监听登陆按钮 是否变灰
			changeColor(){
				if(this.userInfo.code && this.userInfo.name){
					this.login_flag = true
				}else{
					this.login_flag = false
				}
			},
			getLoginType(){
				wx.login({
					success: (res) => {
						if (res.code) {
							//发起网络请求
							console.log('获取用户成功！' + res.code)
							this.getOpenId(res.code)
						} else {
							uni.$u.toast("用户openid获取失败，请保持网络正常后退出后重试");
							console.log('获取用户登录态失败！' + res.errMsg)
						}
					}
				});
			},
			
			showSheet() {
				this.show = true
			},
			codeChange(text) {
				this.tips = text;
			},
			getCode() {
				var phone = this.msm.phone
				var message = ''
				if (!checkPhone(phone))
					message = '手机号码格式不正确'
				if (!phone) message = '请输入手机号码'

				if (message) {
					uni.$u.toast(message);
					return false
				}

				if (this.$refs.uCode.canGetCode) {
					// 模拟向后端请求验证码
					uni.showLoading({
						title: '正在获取验证码'
					})
					var param = {
						phone: phone,
						scene: '登录'
					}
					sendSms({
						params: param,
						custom: {
							toast: true,
							catch: true
						}
					}).then(res => {
						uni.hideLoading();
						// 这里此提示会被this.start()方法中的提示覆盖
						uni.$u.toast('验证码已发送');
						// 通知验证码组件内部开始倒计时
						this.$refs.uCode.start();
					}).catch(err => {
						// uni.hideLoading();
					})
				} else {
					uni.$u.toast('倒计时结束后再发送');
				}
			},

			async getOpenId(code) {
				uni.showLoading({
					title: '数据获取中...',
					mask: true
				});
				await getOpenId(code).then(res => {
					if (res && JSON.stringify(res) !== "{}") {
						this.openId = res
						uni.setStorageSync('openId', res);
					}
				})
			},
			async getQiniuToken() { //获取七牛的uptoken
				var that = this
				getUploadToken().then(res => {
					if (res && JSON.stringify(res) !== "{}") {
						this.qiniuToken = res
					}

				})

			},
			uploadFilePromise(url, name) {
				var that = this
				return new Promise((resolve, reject) => {
					let a = uni.uploadFile({
						url: 'https://upload-z1.qiniup.com/',
						filePath: url,
						name: 'file',
						formData: {
							token: that.qiniuToken,
						},
						success: (res) => {
							setTimeout(() => {
								if (res.data) {
									var imgData = JSON.parse(res.data);
									if (name == 5) {
										that.frontImg = config.qiniuUrl + imgData.key
										console.log(config.qiniuUrl + imgData.key)
										that.fileList5.forEach(item => {
											item.url = config.qiniuUrl + imgData.key
										})
										console.log(that.fileList5)
									} else if (name == 6) {
										that.reverseImg = config.qiniuUrl + imgData.key
										that.fileList6.forEach(item => {
											item.url = config.qiniuUrl + imgData.key
										})
									}
									resolve(config.qiniuUrl + imgData.key)
								}

							}, 1000)
						}
					});
				})
			},
			validityPeopleForm() {
				const {
					name,
					type,
					code
				} = this.userInfo
				let message = ''
				if (!name) {
					message = '请输入姓名'
				} else if (!type) {
					message = '请选择证件类型'
				} else if (!code) {
					message = '请输入证件号码'
				} else if (type === '身份证' && !checkIdNo(code)) {
					message = '证件号码格式不正确'
				} else if (type !== '' && !uni.$u.test.enOrNum(code)) {
					message = '证件号码格式不正确'
				}
				if (message) {
					uni.$u.toast(message);
					return false
				}
				return true
			},

			checkLogin() {
				if (!this.validityPeopleForm()) {
					setTimeout(function() {}, 2000);
					return false
				}
				if (!this.openId) {
					return uni.$u.toast("用户openid获取失败，请保持网络正常后退出后重试");
				}
				
				
				const {
					name,
					type,
					code
				} = this.userInfo
				const params = {
					name,
					idNumber: code,
					documentType: this.dictValue ? this.dictValue : 1,
					openId: this.openId
				}
				loginCheck(params, {
					custom: {
						toast: true,
						catch: true
					}
				}).then(res => {

					this.msm.phone = res.phone
					if(this.$store.state.debug){
						login(params, {
							custom: {
								toast: true,
								catch: true
							}
						}).then(res => {
							uni.setStorageSync('token', res.token)
							this.$store.dispatch('setLoginStatus', true);
							uni.navigateTo({
								url: '/pages/main/index',
							})
						})
					}else{
						this.showPopupYZM = true
					}
				})
			},


			login() {
				if (!this.validityPeopleForm()) {
					setTimeout(function() {}, 2000);
					return false
				}
				const {
					name,
					type,
					code
				} = this.userInfo
				const params = {
					name,
					idNumber: code,
					documentType: this.dictValue ? this.dictValue : 1,
					openId: this.openId
				}
				if(!this.msm.code)return uni.$u.toast("请输入验证码");
				
				uni.showLoading({
					title: '加载中...',
					mask: true
				});
				var paramSms = {
					phone: this.msm.phone,
					scene: '登录',
					code: this.msm.code
				}
				verifySms({
					params: paramSms,
					custom: {
						toast: true,
						catch: true
					}
				}).then(resmsm => {
					uni.showLoading({
						title: '加载中...',
						mask: true
					});
					login(params, {
						custom: {
							toast: true,
							catch: true
						}
					}).then(res => {
						this.showPopupYZM = false
						uni.setStorageSync("tokenTime", new Date().getTime());
						uni.setStorageSync('token', res.token)
						this.$store.dispatch('setLoginStatus', true);
						uni.reLaunch({
							url: '/pages/main/index'
						})
					})
				}).catch(err => {
					console.log(err)
					// uni.$u.toast(err.msg);
				})

			},
			register() {
				uni.navigateTo({
					url: '/pages/login/register',
				})
			},
			close() {
				this.showPopup = false
				this.showPopupYZM = false
			},
			open() {},
			select(info) {
				const {
					dictValue,
					dictLabel
				} = info
				this.dictValue = dictValue
				this.userInfo.type = dictLabel
				this.show = false
			},
			async getDictType() {
				await getDictType("document_type").then(res => {
					if (res && JSON.stringify(res) !== "{}") {
						this.list = res.map((item) => {
							item.name = item.dictLabel
							return item
						})
					}
				})
			},
		},
	}
</script>

<style lang="scss" scoped>
	.disable{
		background-color: #bbbbbb !important;
	}
	.header{
		height: 260upx;
		width: 100%;
		background-color: #0e59a3;
		align-items: center;
		justify-content: center;
		.header_main{
			width: 100%;
			box-sizing: border-box;
			display: flex;
			align-items: center;
			flex-direction: row;
			height: 104upx;
			padding: 0 100upx;
			image{
				height: 104upx;
				width: 104upx;
				margin-right: 30upx;
			}
			text{
				color: #fff;
				font-size: 40upx;
				
			}
		}
	}
	.login {
		padding: 40upx 0 0 0;
		background: #F1F4F7;
		position: fixed;
		top: 260upx;
		left: 0;
		bottom: 0;
		right: 0;
		.spe_info{
			width: 600upx;
			height: 88upx;
			margin: 0 auto 40upx;
			.name {
				height: 42upx;
				font-size: 30upx;
				font-family: PingFangSC-Regular, PingFang SC;
				font-weight: 400;
				color: #333333;
				line-height: 88upx;
				position: absolute;
			}
			.form-action {
				width: 460upx;
				position: absolute;
				box-sizing: border-box;
				padding: 0 24upx;
				height: 88upx;
				left: 140upx;
				top: 50%;
				transform: translateY(-50%);
				font-size: 31upx;
				background-color: #fff;
			}
			.right{
				top:28upx;
			}
			.form_actionspe{
				flex-direction: row;
				justify-content: space-between;
				background-color: transparent;
				padding: 0 !important;
				.spe_ipt{
					background-color: #fff !important;
					padding-left: 24upx;
					width: 250upx;
								border-radius: 8upx;
				}
				.sendCode{
					width: 190upx;
					height: 88upx;
					color: #fff;
					line-height: 88upx;
					background-color: #0e59a3;
					font-size: 26upx;
					text-align: center;
					
				}
			}
		}
		// .info {
		// 	width: 600upx;
		// 	height: 88upx;
		// 	background: #FFFFFF;
		// 	border-radius: 8upx;
		// 	margin: 0 auto 40upx;
		// 	padding: 24upx 0 22upx 36upx;
		// 	.name {
		// 		height: 42upx;
		// 		font-size: 30upx;
		// 		font-family: PingFangSC-Regular, PingFang SC;
		// 		font-weight: 400;
		// 		color: #333333;
		// 		line-height: 42upx;
		// 		position: absolute;
		// 	}

		// 	.form-action {
		// 		width: 356upx;
		// 		position: absolute;
		// 		left: 176upx;
		// 		top: 50%;
		// 		transform: translateY(-50%);
		// 		font-size: 31upx;
		// 		background-color: #fff;
		// 	}
		// 	.form_actionspe{
		// 		display: flex;
		// 		flex-direction: row;
		// 		justify-content: space-between;
		// 	}
		// }

		.login-action,
		.register {
			margin: 0 auto 20upx;
			width: 600upx;
			height: 88upx;
			border-radius: 8upx;
			line-height: 88upx;
			font-size: 32upx;
			font-family: PingFangSC-Regular, PingFang SC;
			font-weight: 400;
			text-align: center;
			box-sizing: border-box;
		}

		.login-action {
			color: #FFFFFF;
			background: #0e59a3;
		}

		.register {
			color: #3A8CF0;
			border: 2upx solid #3A8CF0;
			background: #F1F4F7;
		}

		.notice {
			width: 600upx;
			height: 368upx;
			background: #FFFFFF;
			border-radius: 20upx;
		}

		.title {
			width: 100%;
			height: 94upx;
			border: 2upx solid #EEEEEE;
			text-align: center;
			line-height: 94upx;
			font-size: 32upx;
			font-family: PingFangSC-Medium, PingFang SC;
			font-weight: 500;
			color: #333333;
			border-radius: 20upx;
		}
.slot-content {
		padding: 0 20rpx;
		width: 100%;
	}
		.notice-info {
			height: 68upx;
			font-size: 30upx;
			font-family: PingFangSC-Regular, PingFang SC;
			font-weight: 400;
			color: #333333;
			line-height: 56px;
			margin-bottom: 22upx;
			text-align: center;
		}

		.register-btn {
			width: 248upx;
			height: 88upx;
			background: #3A8CF0;
			border-radius: 20upx;
			margin: 0 auto;
			text-align: center;
			line-height: 88upx;
			font-size: 30upx;
			font-family: PingFangSC-Regular, PingFang SC;
			font-weight: 400;
			color: #FFFFFF;
		}

		.right {
			width: 28upx;
			height: 36upx;
			position: absolute;
			right: 32upx
		}
	}
</style>
